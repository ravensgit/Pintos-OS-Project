            +--------------------+
            |        CS 140      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Sashidhar Motte <smotte@buffalo.edu>
Charan Kumar Bolla <cbolla@buffalo.edu>
Naveen Manikandan <manikan2@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

To implement a non-busy-waiting sleep function, we need to track sleeping 
threads and their wake-up times. The following structures were added or changed:

In struct thread (from threads/thread.h):

	int64_t alarm_time;

	- This holds the specific system tick value when a 
	  sleeping thread should be awakened.

	struct list_elem alarm_elem;

	- This element allows a thread to be placed on a list, 
	  in this case, the sleepers list.


In devices/timer.c:

	static struct list sleepers;

	- A global list containing all threads that are currently sleeping.
	  It is kept sorted by alarm_time.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

When a thread calls timer_sleep(), it first calculates its target wake-up time. It then disables interrupts, adds itself to a global sleepers list that is kept sorted by wake-up time, and calls thread_block() to go to sleep. This immediately yields the CPU. The thread consumes no processor time until the timer interrupt handler, which runs on every clock tick, finds that the thread's wake-up time has been reached. At that moment, the handler removes the thread from the sleepers list and calls thread_unblock(), moving it to the ready queue so it can be scheduled to run again.


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

The primary step to minimize time in the interrupt handler is maintaining 
the "sleepers" list in 'sorted order'. By keeping the list sorted by wake-up 
time, the handler only ever needs to check the thread at the very front. 
If that thread isn't ready to wake up, the handler knows that no other threads 
in the list are ready either and can exit immediately. This avoids a slow and 
inefficient scan of the entire list on every single tick.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

The main problem is that the global sleepers list is a shared resource. If multiple threads tried to add themselves to it at the same time, the list's pointers could get corrupted. We avoid this by wrapping the list modification code inside a call to intr_disable(). This stops the OS from switching threads, so only one thread can be touching the list at any given moment. It has to finish its work before another thread can get a turn.


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

This is pretty much the same issue, but the race is between a thread adding itself to the sleepers list and the timer interrupt trying to read from it. The solution is the same: the intr_disable() call in timer_sleep() also stops the timer interrupt from firing. This guarantees that the interrupt handler won't ever run in the middle of a list update and see a broken, half-modified list.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

The biggest reason for this design was to get rid of the old implementation's busy-waiting. Having a thread spin in a loop, wasting CPU cycles just to check the time, is incredibly inefficient. Our new design is much better because it uses thread_block() to put the thread completely to sleep, meaning it uses zero CPU resources while it waits. This frees up the processor to do actual work for other threads.

We also considered using a simple, unsorted list to keep track of sleeping threads. While that would have worked, it would have been slow. The timer interrupt would have to scan the entire list every time it ran, just to see if anyone's time was up. We decided to use a sorted list instead. It's a little more work to insert threads, but it makes the interrupt handler's job super fast, it just has to peek at the first thread. For something that runs 100 times a second, that small optimization makes a big difference.


             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
